#ifndef _LIBRARY_TOOLS_TRIG_H_
#define _LIBRARY_TOOLS_TRIG_H_

#include <cstdint>
#define _USE_MATH_DEFINES
#include <math.h>

constexpr size_t TRIG_LUT_SIZE         = 360;
constexpr float  TRIG_LUT_INDEX_FACTOR = 1.0f / (2.0f * M_PI) * TRIG_LUT_SIZE;
constexpr size_t TRIG_LUT_COSINE       = TRIG_LUT_SIZE / 4;

float LUT_SINE[TRIG_LUT_SIZE] = {0.0f, 0.0174524064372835f, 0.0348994967025010f,
    0.0523359562429438f, 0.0697564737441253f, 0.0871557427476582f,
    0.104528463267653f, 0.121869343405147f, 0.139173100960065f,
    0.156434465040231f, 0.173648177666930f, 0.190808995376545f,
    0.207911690817759f, 0.224951054343865f, 0.241921895599668f,
    0.258819045102521f, 0.275637355816999f, 0.292371704722737f,
    0.309016994374947f, 0.325568154457157f, 0.342020143325669f,
    0.358367949545300f, 0.374606593415912f, 0.390731128489274f,
    0.406736643075800f, 0.422618261740699f, 0.438371146789077f,
    0.453990499739547f, 0.469471562785891f, 0.484809620246337f,
    0.500000000000000f, 0.515038074910054f, 0.529919264233205f,
    0.544639035015027f, 0.559192903470747f, 0.573576436351046f,
    0.587785252292473f, 0.601815023152048f, 0.615661475325658f,
    0.629320391049837f, 0.642787609686539f, 0.656059028990507f,
    0.669130606358858f, 0.681998360062499f, 0.694658370458997f,
    0.707106781186548f, 0.719339800338651f, 0.731353701619171f,
    0.743144825477394f, 0.754709580222772f, 0.766044443118978f,
    0.777145961456971f, 0.788010753606722f, 0.798635510047293f,
    0.809016994374948f, 0.819152044288992f, 0.829037572555042f,
    0.838670567945424f, 0.848048096156426f, 0.857167300702112f,
    0.866025403784439f, 0.874619707139396f, 0.882947592858927f,
    0.891006524188368f, 0.898794046299167f, 0.906307787036650f,
    0.913545457642601f, 0.920504853452440f, 0.927183854566787f,
    0.933580426497202f, 0.939692620785908f, 0.945518575599317f,
    0.951056516295154f, 0.956304755963035f, 0.961261695938319f,
    0.965925826289068f, 0.970295726275997f, 0.974370064785235f,
    0.978147600733806f, 0.981627183447664f, 0.984807753012208f,
    0.987688340595138f, 0.990268068741570f, 0.992546151641322f,
    0.994521895368273f, 0.996194698091746f, 0.997564050259824f,
    0.998629534754574f, 0.999390827019096f, 0.999847695156391f, 1.0f,
    0.999847695156391f, 0.999390827019096f, 0.998629534754574f,
    0.997564050259824f, 0.996194698091746f, 0.994521895368273f,
    0.992546151641322f, 0.990268068741570f, 0.987688340595138f,
    0.984807753012208f, 0.981627183447664f, 0.978147600733806f,
    0.974370064785235f, 0.970295726275997f, 0.965925826289068f,
    0.961261695938319f, 0.956304755963036f, 0.951056516295154f,
    0.945518575599317f, 0.939692620785908f, 0.933580426497202f,
    0.927183854566787f, 0.920504853452440f, 0.913545457642601f,
    0.906307787036650f, 0.898794046299167f, 0.891006524188368f,
    0.882947592858927f, 0.874619707139396f, 0.866025403784439f,
    0.857167300702112f, 0.848048096156426f, 0.838670567945424f,
    0.829037572555042f, 0.819152044288992f, 0.809016994374948f,
    0.798635510047293f, 0.788010753606722f, 0.777145961456971f,
    0.766044443118978f, 0.754709580222772f, 0.743144825477394f,
    0.731353701619171f, 0.719339800338651f, 0.707106781186548f,
    0.694658370458997f, 0.681998360062499f, 0.669130606358858f,
    0.656059028990507f, 0.642787609686540f, 0.629320391049837f,
    0.615661475325658f, 0.601815023152048f, 0.587785252292473f,
    0.573576436351046f, 0.559192903470747f, 0.544639035015027f,
    0.529919264233205f, 0.515038074910054f, 0.500000000000000f,
    0.484809620246337f, 0.469471562785891f, 0.453990499739547f,
    0.438371146789077f, 0.422618261740700f, 0.406736643075800f,
    0.390731128489274f, 0.374606593415912f, 0.358367949545300f,
    0.342020143325669f, 0.325568154457157f, 0.309016994374948f,
    0.292371704722737f, 0.275637355816999f, 0.258819045102521f,
    0.241921895599668f, 0.224951054343865f, 0.207911690817759f,
    0.190808995376545f, 0.173648177666930f, 0.156434465040231f,
    0.139173100960065f, 0.121869343405148f, 0.104528463267654f,
    0.0871557427476582f, 0.0697564737441255f, 0.0523359562429438f,
    0.0348994967025011f, 0.0174524064372834f, 0.0f, -0.0174524064372828f,
    -0.0348994967025000f, -0.0523359562429431f, -0.0697564737441244f,
    -0.0871557427476575f, -0.104528463267653f, -0.121869343405146f,
    -0.139173100960065f, -0.156434465040230f, -0.173648177666930f,
    -0.190808995376544f, -0.207911690817759f, -0.224951054343864f,
    -0.241921895599667f, -0.258819045102520f, -0.275637355816998f,
    -0.292371704722736f, -0.309016994374946f, -0.325568154457156f,
    -0.342020143325668f, -0.358367949545300f, -0.374606593415911f,
    -0.390731128489273f, -0.406736643075799f, -0.422618261740698f,
    -0.438371146789077f, -0.453990499739546f, -0.469471562785890f,
    -0.484809620246336f, -0.499999999999999f, -0.515038074910053f,
    -0.529919264233204f, -0.544639035015026f, -0.559192903470746f,
    -0.573576436351045f, -0.587785252292472f, -0.601815023152048f,
    -0.615661475325658f, -0.629320391049837f, -0.642787609686539f,
    -0.656059028990507f, -0.669130606358858f, -0.681998360062498f,
    -0.694658370458997f, -0.707106781186547f, -0.719339800338651f,
    -0.731353701619170f, -0.743144825477394f, -0.754709580222771f,
    -0.766044443118977f, -0.777145961456971f, -0.788010753606721f,
    -0.798635510047292f, -0.809016994374947f, -0.819152044288991f,
    -0.829037572555041f, -0.838670567945424f, -0.848048096156426f,
    -0.857167300702112f, -0.866025403784438f, -0.874619707139396f,
    -0.882947592858927f, -0.891006524188367f, -0.898794046299167f,
    -0.906307787036649f, -0.913545457642601f, -0.920504853452440f,
    -0.927183854566787f, -0.933580426497202f, -0.939692620785908f,
    -0.945518575599317f, -0.951056516295153f, -0.956304755963035f,
    -0.961261695938319f, -0.965925826289068f, -0.970295726275996f,
    -0.974370064785235f, -0.978147600733805f, -0.981627183447664f,
    -0.984807753012208f, -0.987688340595138f, -0.990268068741570f,
    -0.992546151641322f, -0.994521895368273f, -0.996194698091745f,
    -0.997564050259824f, -0.998629534754574f, -0.999390827019096f,
    -0.999847695156391f, -1.0f, -0.999847695156391f, -0.999390827019096f,
    -0.998629534754574f, -0.997564050259824f, -0.996194698091746f,
    -0.994521895368274f, -0.992546151641322f, -0.990268068741571f,
    -0.987688340595138f, -0.984807753012208f, -0.981627183447664f,
    -0.978147600733806f, -0.974370064785236f, -0.970295726275997f,
    -0.965925826289068f, -0.961261695938319f, -0.956304755963036f,
    -0.951056516295154f, -0.945518575599317f, -0.939692620785909f,
    -0.933580426497202f, -0.927183854566788f, -0.920504853452441f,
    -0.913545457642601f, -0.906307787036650f, -0.898794046299167f,
    -0.891006524188368f, -0.882947592858927f, -0.874619707139396f,
    -0.866025403784439f, -0.857167300702113f, -0.848048096156427f,
    -0.838670567945424f, -0.829037572555042f, -0.819152044288992f,
    -0.809016994374948f, -0.798635510047294f, -0.788010753606722f,
    -0.777145961456971f, -0.766044443118979f, -0.754709580222773f,
    -0.743144825477395f, -0.731353701619171f, -0.719339800338652f,
    -0.707106781186548f, -0.694658370458998f, -0.681998360062499f,
    -0.669130606358859f, -0.656059028990508f, -0.642787609686540f,
    -0.629320391049838f, -0.615661475325659f, -0.601815023152049f,
    -0.587785252292474f, -0.573576436351047f, -0.559192903470747f,
    -0.544639035015028f, -0.529919264233206f, -0.515038074910055f,
    -0.500000000000001f, -0.484809620246338f, -0.469471562785892f,
    -0.453990499739548f, -0.438371146789079f, -0.422618261740700f,
    -0.406736643075801f, -0.390731128489275f, -0.374606593415913f,
    -0.358367949545301f, -0.342020143325669f, -0.325568154457158f,
    -0.309016994374949f, -0.292371704722738f, -0.275637355817000f,
    -0.258819045102522f, -0.241921895599669f, -0.224951054343866f,
    -0.207911690817760f, -0.190808995376546f, -0.173648177666931f,
    -0.156434465040232f, -0.139173100960067f, -0.121869343405148f,
    -0.104528463267654f, -0.0871557427476592f, -0.0697564737441265f,
    -0.0523359562429444f, -0.0348994967025017f, -0.0174524064372845f};

const uint16_t LUT_SINE_10b[TRIG_LUT_SIZE] = {512, 520, 529, 538, 547, 556, 565,
    574, 583, 592, 600, 609, 618, 627, 635, 644, 652, 661, 670, 678, 686, 695,
    703, 711, 720, 728, 736, 744, 752, 759, 767, 775, 783, 790, 798, 805, 812,
    819, 826, 833, 840, 847, 854, 860, 867, 873, 879, 886, 892, 898, 903, 909,
    915, 920, 925, 930, 936, 940, 945, 950, 954, 959, 963, 967, 971, 975, 979,
    982, 986, 989, 992, 995, 998, 1001, 1003, 1006, 1008, 1010, 1012, 1014,
    1015, 1017, 1018, 1019, 1020, 1021, 1022, 1022, 1023, 1023, 1023, 1023,
    1023, 1022, 1022, 1021, 1020, 1019, 1018, 1017, 1015, 1014, 1012, 1010,
    1008, 1006, 1003, 1001, 998, 995, 992, 989, 986, 982, 979, 975, 971, 967,
    963, 959, 954, 950, 945, 940, 936, 930, 925, 920, 915, 909, 903, 898, 892,
    886, 879, 873, 867, 860, 854, 847, 840, 833, 826, 819, 812, 805, 798, 790,
    783, 775, 767, 759, 752, 744, 736, 728, 720, 711, 703, 695, 686, 678, 670,
    661, 652, 644, 635, 627, 618, 609, 600, 592, 583, 574, 565, 556, 547, 538,
    529, 520, 512, 503, 494, 485, 476, 467, 458, 449, 440, 431, 423, 414, 405,
    396, 388, 379, 371, 362, 353, 345, 337, 328, 320, 312, 303, 295, 287, 279,
    271, 264, 256, 248, 240, 233, 225, 218, 211, 204, 197, 190, 183, 176, 169,
    163, 156, 150, 144, 137, 131, 125, 120, 114, 108, 103, 98, 93, 87, 83, 78,
    73, 69, 64, 60, 56, 52, 48, 44, 41, 37, 34, 31, 28, 25, 22, 20, 17, 15, 13,
    11, 9, 8, 6, 5, 4, 3, 2, 1, 1, 0, 0, 0, 0, 0, 1, 1, 2, 3, 4, 5, 6, 8, 9, 11,
    13, 15, 17, 20, 22, 25, 28, 31, 34, 37, 41, 44, 48, 52, 56, 60, 64, 69, 73,
    78, 83, 87, 93, 98, 103, 108, 114, 120, 125, 131, 137, 144, 150, 156, 163,
    169, 176, 183, 190, 197, 204, 211, 218, 225, 233, 240, 248, 256, 264, 271,
    279, 287, 295, 303, 312, 320, 328, 337, 345, 353, 362, 371, 379, 388, 396,
    405, 414, 423, 431, 440, 449, 458, 467, 476, 485, 494, 503};

/**
 * @brief Compute the sine of an angle using a LUT
 *
 * Avoid large angles as rounding errors will compound
 *
 * @param x Angle to compute
 * @return float sin(x)
 */
float inline lutSin(float x) {
  size_t i = size_t(x * TRIG_LUT_INDEX_FACTOR) % TRIG_LUT_SIZE;
  return LUT_SINE[i];
};

/**
 * @brief Compute the cosine of an angle using a LUT
 *
 * Avoid large angles as rounding errors will compound
 *
 * @param x Angle to compute
 * @return float cos(x)
 */
float inline lutCos(float x) {
  size_t i =
      size_t(x * TRIG_LUT_INDEX_FACTOR + TRIG_LUT_COSINE) % TRIG_LUT_SIZE;
  return LUT_SINE[i];
};

#endif /* _LIBRARY_TOOLS_TRIG_H_ */